name: Image Builder

on:
  push:
    branches:
    - 'release'
    paths:
    - '.github/workflows/image-builder.yml'
    - 'image-builder/**'
  workflow_dispatch:
  workflow_run:
    workflows: [Auto Update Variables]
    types: [completed]

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/image-builder

jobs:
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - shell: bash
        run: |
          echo 'The triggering workflow failed'
          exit 0
  aws-lc:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:image-builder"
          file: "./aws-lc.Dockerfile"
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          outputs: type=image,compression=estargz,force-compression=true,oci-mediatypes=true,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/aws-lc-digests/
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/aws-lc-digests/${digest#sha256:}"          

          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: aws-lc-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/aws-lc-digests/*
          if-no-files-found: error
          retention-days: 1

  aws-lc-multiarch:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - aws-lc
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/aws-lc-digests/
          pattern: aws-lc-digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/aws-lc-digests/
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:aws-lc \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:aws-lc

  modern-toolbox-fedora:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:image-builder"
          file: "./modern-toolbox-fedora.Dockerfile"
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          outputs: type=image,compression=estargz,force-compression=true,oci-mediatypes=true,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/modern-toolbox-fedora-digests/
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/modern-toolbox-fedora-digests/${digest#sha256:}"          

          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: modern-toolbox-fedora-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/modern-toolbox-fedora-digests/*
          if-no-files-found: error
          retention-days: 1

  modern-toolbox-fedora-multiarch:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - modern-toolbox-fedora
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/modern-toolbox-fedora-digests/
          pattern: modern-toolbox-fedora-digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/modern-toolbox-fedora-digests/
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:modern-toolbox-fedora \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:modern-toolbox-fedora

  alpine:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:image-builder"
          file: "./alpine.Dockerfile"
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          outputs: type=image,compression=estargz,force-compression=true,oci-mediatypes=true,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/alpine-digests/
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/alpine-digests/${digest#sha256:}"          

          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: alpine-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/alpine-digests/*
          if-no-files-found: error
          retention-days: 1

  alpine-multiarch:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - alpine
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/alpine-digests/
          pattern: alpine-digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/alpine-digests/
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:alpine \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:alpine

  endlessh:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:image-builder"
          file: "./endlessh.Dockerfile"
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          outputs: type=image,compression=estargz,force-compression=true,oci-mediatypes=true,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/endlessh-digests/
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/endlessh-digests/${digest#sha256:}"          

          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: endlessh-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/endlessh-digests/*
          if-no-files-found: error
          retention-days: 1

  endlessh-multiarch:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - endlessh
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/endlessh-digests/
          pattern: endlessh-digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/endlessh-digests/
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:endlessh \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:endlessh
